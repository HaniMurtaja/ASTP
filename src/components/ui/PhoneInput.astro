---
import type { CountryObject } from '~/api/api';

type Props = {
  name: string;
  prefixName?: string;
  label?: string;
  placeholder?: string;
  required?: boolean;
  className?: string;
  containerClass?: string;
  selectedCountry?: { prefix: string };
  countries: CountryObject[];
  locale?: string;
  translations?: {
    validation: {
      required: string;
      invalidFormat: string;
    };
  };
};

const {
  name,
  prefixName = `${name}_prefix`,
  label = 'رقم الهاتف',
  placeholder = 'ادخل رقم الهاتف',
  required = false,
  className = '',
  containerClass = '',
  selectedCountry,
  countries,
  locale = 'en',
  translations = {
    validation: {
      required: 'هذا الحقل مطلوب',
      invalidFormat: 'صيغة غير صحيحة',
    },
  },
} = Astro.props;

const countryItems = countries
  .map((country) => {
    const found = country.translations?.find((t) => t.locale === locale);
    const labelText = `${country.flag_emoji?.img || ''} ${found?.name || country.official_name} (+${country.international_phone})`;
    return {
      value: country.id,
      prefix: `+${country.international_phone}`,
      label: labelText,
      flag: country.flag_emoji?.utf8 || '',
      pattern: `^(\\+${country.international_phone}|00${country.international_phone})`,
    };
  })
  .sort((a, b) => a.label.localeCompare(b.label));
---

<div class={`phone-input-group ${containerClass}`}>
  <label class="block mb-2 text-sm font-medium text-gray-700">
    {label}{required && <span class="text-red-500">*</span>}
  </label>

  <!-- wrapper catches focusout to close list -->
  <bdi
    id={`${prefixName}-wrapper`}
    class="grid grid-cols-[5rem,1fr] gap-2 focus:ring-primary outline-transparent"
    tabindex="0"
  >
    <!-- COUNTRY CODE PICKER -->
    <div class="relative">
      <input
        type="hidden"
        name={prefixName}
        id={prefixName}
        value={selectedCountry?.id || ''}
        required={required}
      />
      <input
        type="text"
        id={`${prefixName}-search`}
        class="w-full px-3 pt-2 pb-3 text-sm bg-white border border-gray-300 rounded-md cursor-pointer dark:bg-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-light"
        placeholder="+xxx"
        autocomplete="off"
      />
      <ul
        id={`${prefixName}-list`}
        class="absolute z-10 hidden w-48 mt-1 overflow-y-auto bg-white border border-gray-300 rounded-md shadow-lg dark:bg-gray-600 dark:text-white max-h-60"
      >
        {countryItems.map(item => (
          <li
            data-flag={item.flag}
            data-prefix={item.prefix}
            data-value={item.value}
            data-pattern={item.pattern}
            class="px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white "
            tabindex="-1"
          >
            {item.label}
          </li>
        ))}
      </ul>
    </div>

    <!-- PHONE NUMBER FIELD -->
    <div class="relative">
      <input
        type="tel"
        name={name}
        id={name}
        placeholder={placeholder}
        class={`w-full px-3 py-2 border border-gray-300 bg-white dark:bg-gray-600 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary-light ${className}`}
        required={required}
      />
    </div>
  </bdi>
</div>

<style is:inline>
  /* By default, hide the dropdown list */
  #{{prefixName}}-list { display: none; }
  .dark #{{prefixName}}-list { background: #2d2d2d; border-color: #444; }
  .dark #{{prefixName}}-list li:hover { background: #374151; }
</style>

<script is:inline define:vars={{ name, prefixName, translations, countryItems }}>
  const searchInput = document.getElementById(`${prefixName}-search`);
  const listEl      = document.getElementById(`${prefixName}-list`);
  const hiddenInput = document.getElementById(prefixName);
  const phoneInput  = document.getElementById(name);
  const wrapper     = document.getElementById(`${prefixName}-wrapper`);

  // Keyboard navigation state
  let highlightIndex = -1;
  const getVisible = () =>
    Array.from(listEl.querySelectorAll('li')).filter(li => !li.classList.contains('hidden'));

  function clearHighlights() {
    getVisible().forEach(li => li.classList.remove('bg-primary-light', 'text-white'));
  }

  function highlightItem(idx) {
    clearHighlights();
    const items = getVisible();
    if (items[idx]) {
      items[idx].classList.add('bg-primary-light', 'text-white');
      items[idx].scrollIntoView({ block: 'nearest' });
    }
  }

  function showList() {
    listEl.classList.remove('hidden');
  }
  function hideList() {
    listEl.classList.add('hidden');
    clearHighlights();
    highlightIndex = -1;
  }

  // Close on focus leaving wrapper
  wrapper.addEventListener('focusout', e => {
    if (!wrapper.contains(e.relatedTarget)) hideList();
  });

  // Toggle on click/focus
  searchInput.addEventListener('click', e => { e.stopPropagation(); showList(); });
  searchInput.addEventListener('focus', showList);

  // Click outside → close
  document.addEventListener('click', e => {
    if (!wrapper.contains(e.target)) hideList();
  });

  // Filter as you type
  searchInput.addEventListener('input', () => {
    const val = searchInput.value?.toLowerCase();
    listEl.querySelectorAll('li').forEach(li =>
      li.classList.toggle('hidden', !li.textContent?.toLowerCase().includes(val))
    );
    showList();
    highlightIndex = -1;
  });

  // Arrow keys / Enter / Escape
  searchInput.addEventListener('keydown', e => {
    const items = getVisible();
    if (!items.length) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        highlightIndex = (highlightIndex + 1) % items.length;
        highlightItem(highlightIndex);
        break;
      case 'ArrowUp':
        e.preventDefault();
        highlightIndex = (highlightIndex - 1 + items.length) % items.length;
        highlightItem(highlightIndex);
        break;
      case 'Enter':
        e.preventDefault();
        if (highlightIndex >= 0) items[highlightIndex].click();
        break;
      case 'Escape':
        hideList();
        break;
    }
  });

  // Keep list open when clicking items
  listEl.addEventListener('mousedown', e => e.preventDefault());

  // Selection handler
  listEl.addEventListener('click', e => {
    const li = e.target.closest('li');
    if (!li) return;
    searchInput.value = `${li.dataset.flag} ${li.dataset.prefix}`;
    hiddenInput.value  = li.dataset.value;
    hideList();
    phoneInput.focus();
  });

  // Strip country prefix from the phone number
  function handleNumber() {
    const v = phoneInput.value;
    for (const item of countryItems) {
      const re = new RegExp(item.pattern);
      if (re.test(v)) {
        const match = listEl.querySelector(`li[data-prefix="${item.prefix}"]`);
        if (match) {
          searchInput.value = match.textContent.trim();
          hiddenInput.value  = item.value;
          phoneInput.value  = v.replace(item.pattern, '');
        }
        break;
      }
    }
  }
  phoneInput.addEventListener('input', handleNumber);
  phoneInput.addEventListener('paste', () => setTimeout(handleNumber, 10));

  // Custom validity
  phoneInput.addEventListener('invalid', function() {
    if (!this.value && this.required) this.setCustomValidity(translations.validation.required);
    else this.setCustomValidity(translations.validation.invalidFormat);
  });
  phoneInput.addEventListener('input', function() {
    this.setCustomValidity('');
  });
</script>