---
import { UI } from 'astrowind:config';
---

<script is:inline define:vars={{ defaultTheme: UI.theme }}>
  if (window.basic_script) {
    return;
  }

  window.basic_script = true;

  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  const initTheme = function () {
    if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
      applyTheme(defaultTheme.replace(':only', ''));
    } else if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      applyTheme('dark');
    } else {
      applyTheme('light');
    }
  };
  initTheme();

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), false);
      });
    }
  }

  const onLoad = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('#header nav', 'click', function (e) {
      if (e.target && e.target.closest('details')) {
        e.stopPropagation();
        return;
      }
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (header) {
        header.classList.add('sticky');
        header.classList.remove('fixed');
      }
    });
    // Helper function to reset header menu classes
    function resetHeaderMenu() {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (header) {
        header.classList.add('sticky');
        header.classList.remove('fixed');
      }
    }

    // Attach the reset function to window resize
    window.addEventListener('resize', resetHeaderMenu);
    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (header) {
        header.classList.toggle('sticky');
        header.classList.toggle('fixed');
      }

      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.getElementById('header')?.classList.toggle('expanded');

      document.getElementById('header')?.classList.toggle('bg-page');
      document.querySelector('#header nav')?.classList.toggle('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) {
        return;
      }
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    const screenSize = window.matchMedia('(max-width: 1300px)');
    screenSize.addEventListener('change', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (header) {
        header.classList.add('sticky');
        header.classList.remove('fixed');
      }
    });

    function applyHeaderStylesOnScroll() {
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (!header) return;
      if (lastKnownScrollPosition > 90 && !header.classList.contains('scroll')) {
        header.classList.add('scroll');
      } else if (lastKnownScrollPosition <= 90 && header.classList.contains('scroll')) {
        header.classList.remove('scroll');
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };
  const onPageShow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.getElementById('header')?.classList.remove('expanded');
    document.querySelector('#header nav')?.classList.add('hidden');
    const header = document.querySelector('#header[data-aw-sticky-header]');
      if (header) {
        header.classList.add('sticky');
        header.classList.remove('fixed');
      }
  };

  window.onload = onLoad;
  window.onpageshow = onPageShow;

  document.addEventListener('astro:after-swap', () => {
    initTheme();
    onLoad();
    onPageShow();
  });
</script>

<script is:inline data-astro-rerun>
  (function () {
    const Observer = {
      observer: null,
      delayBetweenAnimations: 100,
      animationCounter: 0,

      start() {
        const selectors = [
          '[class*=" intersect:"]',
          '[class*=":intersect:"]',
          '[class^="intersect:"]',
          '[class="intersect"]',
          '[class*=" intersect "]',
          '[class^="intersect "]',
          '[class$=" intersect"]',
        ];

        const sections = document.querySelectorAll(selectors.join(','));

        if (!sections.length) return;

        sections.forEach((section) => {
          section._intersectionThreshold = this.getThreshold(section);
        });

        const callback = (entries) => {
          let mostVisibleSection = null;
          let maxIntersectionRatio = 0;

          entries.forEach((entry) => {
            const target = entry.target;
            const intersectionRatio = entry.intersectionRatio;
            const threshold = target._intersectionThreshold;

            const parentSection = target.closest('section');

            if (parentSection && intersectionRatio >= threshold && intersectionRatio > maxIntersectionRatio) {
              maxIntersectionRatio = intersectionRatio;
              mostVisibleSection = parentSection;
            }
          });

          if (mostVisibleSection) {
            const sectionId = mostVisibleSection.getAttribute('id');

            updateActiveNavItem(sectionId);
          }
        };

        this.observer = new IntersectionObserver(callback.bind(this), {
          threshold: [0, 0.25, 0.5, 0.99],
        });

        sections.forEach((section) => {
          this.observer.observe(section);
        });
      },

      getThreshold(element) {
        if (element.classList.contains('intersect-full')) return 0.99;
        if (element.classList.contains('intersect-half')) return 0.5;
        if (element.classList.contains('intersect-quarter')) return 0.25;
        return 0.2;
      },
    };

    function updateActiveNavItem(sectionId) {
      const navItems = document.querySelectorAll("nav a[href^='#']");
      const rootLink = document.querySelector('nav a.root-link');
      let isAnyActive = false;

      navItems.forEach((nav) => {
        if (nav.getAttribute('href') === `#${sectionId}`) {
          nav.classList.add('active');
          rootLink.classList.remove('active');
          isAnyActive = true;

          // Open parent <details> if this link is inside a dropdown
          const details = nav.closest('details');
          if (details) details.open = true;
        } else {
          nav.classList.remove('active');
        }
      });

      // If no nav items are active, activate the root-link
      if (!isAnyActive) {
        activateRootLink();
      }
    }
    function activateRootLink() {
      document.querySelectorAll('nav a').forEach((nav) => {
        nav.classList.remove('active');
      });

      const rootLink = document.querySelector('nav a.root-link');
      if (rootLink) rootLink.classList.add('active');
    }

    Observer.start();

    document.addEventListener('astro:after-swap', () => {
      Observer.start();
    });
  })();
</script>
